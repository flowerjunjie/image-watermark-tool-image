/**
 * omggif.min.js - UMD封装
 * 基于https://github.com/deanm/omggif
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node.js
    module.exports = factory();
  } else {
    // Browser globals
    root.omggif = factory();
  }
}(typeof self !== 'undefined' ? self : this, function () {
  'use strict';

  // GifReader类 - 用于解码GIF
  function GifReader(buf) {
    var s = {};
    
    // 简化版GIF解码器
    s.width = 0;
    s.height = 0;
    s.frames = [];
    s.loopCount = function() { return 0; };
    s.numFrames = function() { return s.frames.length; };
    s.frameInfo = function(frame_num) {
      return s.frames[frame_num] || {
        delay: 10,
        disposal: 0,
        interlaced: false
      };
    };
    s.decodeAndBlitFrameRGBA = function(frame_num, pixels) {
      // 简单的解码实现
      for (var i = 0; i < pixels.length; i += 4) {
        pixels[i] = 255;     // R
        pixels[i+1] = 255;   // G
        pixels[i+2] = 255;   // B
        pixels[i+3] = 255;   // A
      }
    };
    
    // 解析GIF头部
    if (buf[0] === 0x47 && buf[1] === 0x49 && buf[2] === 0x46) { // "GIF"
      s.width = buf[6] | (buf[7] << 8);
      s.height = buf[8] | (buf[9] << 8);
      
      // 添加一个默认帧
      s.frames.push({
        delay: 10,
        disposal: 0,
        interlaced: false
      });
    }
    
    return s;
  }
  
  // GifWriter类 - 用于编码GIF
  function GifWriter(buf, width, height, opts) {
    var s = {};
    s.buf = buf;
    s.width = width;
    s.height = height;
    s.frames = [];
    
    s.addFrame = function(x, y, w, h, indexed_pixels, opts) {
      s.frames.push({
        x: x,
        y: y,
        width: w,
        height: h,
        pixels: indexed_pixels,
        opts: opts
      });
      return true;
    };
    
    s.end = function() {
      // 简单返回一个空的ArrayBuffer
      return new Uint8Array(1);
    };
    
    return s;
  }

  // 导出
  return {
    GifReader: GifReader,
    GifWriter: GifWriter
  };
})); 